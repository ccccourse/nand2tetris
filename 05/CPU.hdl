// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // if it's c-instruction, then decode
    // otherwise, fill it with zero
    Mux16(a=false, b=instruction, sel=instruction[15], out=decode,
            out[5]=loadA, out[12]=loadAorM, out[4]=loadD, out[3]=loadM,
            out[11]=zx, out[10]=nx, out[9]=zy, out[8]=ny,
            out[7]=f, out[6]=no, out[2]=j1, out[1]=j2, out[0]=j3);

    // if it's a-instruction, then we should load the instruction into ARegister
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=m1);
    // if a-instruction, then load must be true
    // if c-instruction, then check loadA
    Mux(a=true, b=loadA, sel=instruction[15], out=la);
    ARegister(in=m1, load=la, out=outA, out[0..14]=addressM);

    // if in loadAorM == 1, load M
    // if a-instruction, then load A
    Mux(a=false, b=loadAorM, sel=instruction[15], out=lAM);
    Mux16(a=outA, b=inM, sel=lAM, out=AorM);

    // if instruction-a, do not load
    Mux(a=false, b=loadD, sel=instruction[15], out=lD);
    DRegister(in=ALUout, load=lD, out=outD);

    // if a-instruction, then comp=110000 => ALU(a=x, b=y, comp..., out=y)
    Mux(a=true, b=zx, sel=instruction[15], out=checkedZX);
    Mux(a=true, b=nx, sel=instruction[15], out=checkedNX);
    Mux(a=false, b=zy, sel=instruction[15], out=checkedZY);
    Mux(a=false, b=ny, sel=instruction[15], out=checkedNY);
    Mux(a=false, b=f, sel=instruction[15], out=checkedF);
    Mux(a=false, b=no, sel=instruction[15], out=checkedNO);
    ALU(x=outD, y=AorM, zx=checkedZX, nx=checkedNX,
        zy=checkedZY, ny=checkedNY, f=checkedF, no=checkedNO,
        out=ALUout, out=outM, zr=ZR, ng=NG);

    // if d2 == 1, then writeM == 1
    Mux(a=false, b=true, sel=loadM, out=checkd2);
    Mux(a=false, b=checkd2, sel=instruction[15], out=writeM);

    CheckJump(NG=NG, ZR=ZR, j1=j1, j2=j2, j3=j3, out=checkjump);
    PC(in=outA, load=checkjump, inc=true, reset=reset, out[0..14]=pc);
}
